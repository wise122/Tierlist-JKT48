-- Create the options table to store individual options
CREATE TABLE options (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    category TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()),
    UNIQUE(name, category)
);

-- Create the option_pairs table for tracking comparisons
CREATE TABLE option_pairs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_option_id BIGINT REFERENCES options(id),
    second_option_id BIGINT REFERENCES options(id),
    first_option_selected INTEGER DEFAULT 0,
    second_option_selected INTEGER DEFAULT 0,
    total_occurrences INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()),
    UNIQUE(first_option_id, second_option_id),
    CHECK (first_option_id < second_option_id) -- Ensure consistent ordering
);

-- Create the suggestions table
CREATE TABLE suggestions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    category TEXT NOT NULL,
    notes TEXT,
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW())
);

-- Create indexes for faster lookups
CREATE INDEX idx_options_category ON options(category);
CREATE INDEX idx_option_pairs_options ON option_pairs(first_option_id, second_option_id);

-- Create a trigger to update the updated_at timestamp
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp
    BEFORE UPDATE ON option_pairs
    FOR EACH ROW
    EXECUTE FUNCTION trigger_set_timestamp(); 